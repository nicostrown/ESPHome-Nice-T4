#sends packets via uart to the Nice BUS T4

esphome:
  name: ${device_name}
  platform: ESP8266
  board: d1_mini


external_components:
  - source:
      type: git
      url: https://github.com/nicostrown/ESPHome-Nice-T4


# enable debugging to find the cause of the reboot through logging
debug:
    
# Enable logging
logger:
  level: DEBUG
#  level: VERBOSE
  baud_rate: 0
  
# Enable Home Assistant API
api:
  reboot_timeout: 0s # otherwise reboots when disconnected from hassio  
  services:
# to send hex commands to the bus T4
  - service: raw_command
    variables:
        raw_cmd: string
    then:
      lambda: |-
         my_nice_cover -> NiceBusT4::send_raw_cmd(raw_cmd);
         
  - service: send_inf_command
    variables:
       to_addr: string
       whose: string
       command: string
       type_command: string
       next_data: string
       data_on: bool
       data_command: string
    then:
      lambda: |-
        my_nice_cover -> NiceBusT4::send_inf_cmd(to_addr, whose, command, type_command, next_data, data_on, data_command);

# sash length recognition
  - service: gate_length_recognition
    then:
      lambda: |-
         rb500hs -> NiceBusT4::set_mcu("0b","01");

# BlueBus device recognition
  - service: devices_recognition
    then:
      lambda: |-
         rb500hs -> NiceBusT4::set_mcu("0a","01");    


#        std::vector < uint8_t > v_to_addr = my_nice_cover -> NiceBusT4::raw_cmd_prepare (to_addr);
#        std::vector < uint8_t > v_whose = my_nice_cover -> NiceBusT4::raw_cmd_prepare (whose);
#        std::vector < uint8_t > v_command = my_nice_cover -> NiceBusT4::raw_cmd_prepare (command);
#        std::vector < uint8_t > v_type_command = my_nice_cover -> NiceBusT4::raw_cmd_prepare (type_command);
#        std::vector < uint8_t > v_data_command = my_nice_cover -> NiceBusT4::raw_cmd_prepare (data_command);
#        if (data_on) {
#          my_nice_cover -> NiceBusT4::tx_buffer_.push(my_nice_cover -> NiceBusT4::gen_inf_cmd(v_to_addr[0], v_to_addr[1], v_whose[0], v_command[0], v_type_command[0], v_data_command, v_data_command.size()));
#        } else {
#          my_nice_cover -> NiceBusT4::tx_buffer_.push(my_nice_cover -> NiceBusT4::gen_inf_cmd(v_to_addr[0], v_to_addr[1], v_whose[0], v_command[0], v_type_command[0]));
#        }
        


 

  
ota:

# Set statul led for Wemos D1 mini
status_led:
  pin: 
    number: D4
    inverted: true
  


wifi:
  ssid: !secret wifi_ssid
  password:  !secret wifi_password

  
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${device_name} Hotspot"
    password: !secret ota_pass


captive_portal:


# Enable web server (can be disabled)
web_server:
  port: 80
  

# Buttons for sending commands
button:
  - platform: template
    name: Step-by-step
    id: sbs
    on_press:
      lambda: |-
           my_nice_cover -> NiceBusT4::send_cmd(bus_t4::SBS);

#         my_nice_cover -> NiceBusT4::send_raw_cmd("55 0c 00 ff 00 66 01 05 9D 01 82 01 64 E6 0c");


  - platform: template
    name: Partial opening 1
    id: p_opn1
    on_press:
      lambda: |-
         my_nice_cover -> NiceBusT4::send_cmd(bus_t4::P_OPN1);
                      
#         my_nice_cover -> NiceBusT4::send_cmd(bus_t4::STOP);
#         my_nice_cover -> NiceBusT4::send_cmd(bus_t4::OPEN);
#         my_nice_cover -> NiceBusT4::send_cmd(bus_t4::CLOSE);
#         my_nice_cover -> NiceBusT4::send_cmd(bus_t4::P_OPN2);
#         my_nice_cover -> NiceBusT4::send_cmd(bus_t4::P_OPN3);
#         my_nice_cover -> NiceBusT4::send_cmd(bus_t4::P_OPN4);
#         my_nice_cover -> NiceBusT4::send_cmd(bus_t4::P_OPN5);
#         my_nice_cover -> NiceBusT4::send_cmd(bus_t4::P_OPN6);
#         my_nice_cover -> NiceBusT4::send_cmd(bus_t4::UNLK_OPN);  # Unlock and open 
#         my_nice_cover -> NiceBusT4::send_cmd(bus_t4::CLS_LOCK);  # Close and Lock 
#         my_nice_cover -> NiceBusT4::send_cmd(bus_t4::UNLCK_CLS); # Unlock and Close
#         my_nice_cover -> NiceBusT4::send_cmd(bus_t4::LOCK);      # Lock
#         my_nice_cover -> NiceBusT4::send_cmd(bus_t4::UNLOCK);    # UnLock
#         my_nice_cover -> NiceBusT4::send_cmd(bus_t4::HOST_SBS);  # Host SBS
#         my_nice_cover -> NiceBusT4::send_cmd(bus_t4::HOST_OPN);  # Host Open
#         my_nice_cover -> NiceBusT4::send_cmd(bus_t4::HOST_CLS);  # Host Close
#         my_nice_cover -> NiceBusT4::send_cmd(bus_t4::SLAVE_SBS); # Slave SBS
#         my_nice_cover -> NiceBusT4::send_cmd(bus_t4::SLAVE_OPN); # Slave Open
#         my_nice_cover -> NiceBusT4::send_cmd(bus_t4::SLAVE_CLS); # Slave Close
#         my_nice_cover -> NiceBusT4::send_cmd(bus_t4::AUTO_ON);   # Auto-opening active
#         my_nice_cover -> NiceBusT4::send_cmd(bus_t4::AUTO_OFF);  # Auto-opening is inactive




cover:
- platform: bus_t4
  name: "Nice RB500HS"
  id: my_nice_cover
#  address: 0x0003            # drive address
#  use_address: 0x0081        # gateway address
